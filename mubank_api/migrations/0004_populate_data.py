# Generated by Django 5.1.5 on 2025-01-30 15:24

from decimal import Decimal
from django.db import migrations
from django.contrib.auth.models import User, Group, Permission
from django.contrib.contenttypes.models import ContentType
from faker import Faker
from mubank_api.models import *
import random
fake = Faker()

def create_group_permissions():
    try:
        print("Iniciando a criação de permissões...")
        wallet_content_type = ContentType.objects.get_for_model(Wallet)
        print(f"ContentType de Wallet: {wallet_content_type}")
        wallet_default_user_permissions = Permission.objects.filter(
            content_type = wallet_content_type,
            codename__in=[
                "add_wallet",
                "change_wallet",
                "view_wallet",
            ]
        )
        print(f"Permissões de Wallet encontradas: {wallet_default_user_permissions}")
        transaction_content_type = ContentType.objects.get_for_model(Transaction)
        print(f"ContentType de Transaction: {transaction_content_type}")
        transaction_default_user_permissions = Permission.objects.filter(
            content_type = transaction_content_type,
            codename__in=[
                "add_transaction",
                "view_transaction",
            ]
        )
        print(f"Permissões de Transaction encontradas: {transaction_default_user_permissions}")
        
        group = Group.objects.create(name = "user_default_permissions")
        print(f"Grupo 'user_default_permissions' criado: {group}")
        group.permissions.set(
            wallet_default_user_permissions | 
            transaction_default_user_permissions
        )
        group.save()
        print("Permissões atribuídas ao grupo e grupo salvo com sucesso!")
        
    except Exception as e:
        print(f"Erro ao criar permissões e grupo: {e}")
        raise
    
def create_transaction(wallet = Wallet):
    try:
        print('Criando transação...')
        Transaction.objects.create(
            receiving_wallet_id = wallet.id,
            ammount = wallet.ammount,
            type = Type_Transaction['deposit'],
        )
        print('Transação criada com sucesso!')
    except Exception as e:
        print('Erro ao criar transação: {e}')

def create_wallet(user = User):
    try:
        print(f"Criando carteira...")
        new_wallet = Wallet.objects.create(
            user_id = user.id,
            name = fake.country(), # nome aleatório de país só pra representar
            balance = Decimal(random.uniform(0, 1000)),
        )
        print('Carteira criada com cucesso!')
        create_transaction(new_wallet)
    except Exception as e:
        print(f"Erro ao criar carteira: {e}") 

def create_super_admin_user():
    try:
        print("Criando superusuário...")
        User.objects.create_superuser(
            username = "admin",
            password = "senha@123",
        )
        print("Superusuário criado com sucesso!")
    except Exception as e:
        print(f"Erro ao criar superusuário: {e}")

def create_defaut_user():
    try:
        username = "default_user"
        password = "senha@123"
        email = f'{username.replace(' ', '')}@email.com' 
        new_user = User.objects.create_user(
            username = username,
            email = email,
            password = password,
        )
        new_user.groups.add(Group.objects.get(name='user_default_permissions'))
        create_wallet(new_user)
    except Exception as e:
        print(f"Erro ao criar usuário padrão: {e}") 

def create_fake_users():
    try:
        for u in range(5):
            username = fake.user_name()
            password = "senha@123"
            email = f"{username.replace(' ', '')}@email.com"
            new_user = User.objects.create_user(
                username = username,
                email = email,
                password = password,
            )
            new_user.groups.add(Group.objects.get(name='user_default_permissions'))
            create_wallet(new_user)
    except Exception as e:
        print(f"Erro ao criar usuário padrão: {e}")
    
def create_users():
    create_super_admin_user()
    create_defaut_user()
    create_fake_users()
    
def populate_data(apps, schema_editor):
    try:
        print("Iniciando o preenchimento de dados...")
        create_group_permissions()
        create_users()
        print("Dados preenchidos com sucesso!")
    except Exception as e:
        print(f"Erro no preenchimento de dados: {e}")
        raise
        
class Migration(migrations.Migration):

    dependencies = [
        ('mubank_api', '0003_alter_transaction_receiving_wallet_id'),
    ]

    operations = [
        migrations.RunPython(populate_data),
    ]
